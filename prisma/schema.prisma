generator client {
  provider      = "prisma-client-js"
  output        = "./generated"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String
  username     String       @unique
  avatar       String?
  role         Role         @default(USER)
  provider     String
  universityId String?
  publicKey    String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  communities  Community[]  @relation("UserCommunities")
  followed     Community[]  @relation("UserFollows") 
  comments     Comment[]    @relation("UserComments")   
  posts        Post[]       @relation("UserPosts")
  postVotes    PostVote[]   @relation("UserPostVotes")
  commentVotes CommentVote[] @relation("UserCommentVotes")
}

model Community {
  id            String   @id @default(cuid())
  communityName String   @unique
  description   String
  public        Boolean  @default(true)
  topics        String[] 
  createdById   String
  createdBy     User     @relation("UserCommunities", fields: [createdById], references: [id])
  followers     User[]   @relation("UserFollows")
  posts         Post[]   // Posts inside this community
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Post {
  id          String      @id @default(cuid())
  title       String
  body        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  communityId String
  community   Community   @relation(fields: [communityId], references: [id])

  authorId    String
  author      User        @relation("UserPosts", fields: [authorId], references: [id])

  comments    Comment[]   @relation("PostComments")
  votes       PostVote[]  @relation("PostVotes")
}

model Comment {
  id          String      @id @default(cuid())
  body        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  commentById String
  commentBy   User        @relation("UserComments", fields: [commentById], references: [id])

  postId      String
  post        Post        @relation("PostComments", fields: [postId], references: [id])

  // Self relation for nested replies
  parentId    String?
  parent      Comment?    @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[]   @relation("CommentReplies")

  votes       CommentVote[] @relation("CommentVotes")
}

model PostVote {
  id        String   @id @default(cuid())
  value     Int      // 1 = upvote, -1 = downvote
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation("UserPostVotes", fields: [userId], references: [id])

  postId    String
  post      Post     @relation("PostVotes", fields: [postId], references: [id])
}

model CommentVote {
  id        String   @id @default(cuid())
  value     Int      // 1 = upvote, -1 = downvote
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation("UserCommentVotes", fields: [userId], references: [id])

  commentId String
  comment   Comment  @relation("CommentVotes", fields: [commentId], references: [id])
}
